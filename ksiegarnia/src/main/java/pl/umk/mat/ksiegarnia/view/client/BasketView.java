/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.umk.mat.ksiegarnia.view.client;

import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

import pl.umk.mat.ksiegarnia.model.book.BookInformation;
import pl.umk.mat.ksiegarnia.model.book.BookOrder;
import pl.umk.mat.ksiegarnia.view.services.ServicesView;

/**
 *
 * @author Mariusz
 */
public class BasketView extends ServicesView {

    /**
     * Creates new form MyBasket
     */

    public BasketView() {
        initComponents();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableBasket = new javax.swing.JTable();
        lMessage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lSum = new javax.swing.JLabel();
        selectAll = new javax.swing.JCheckBox();
        mainMenu = new javax.swing.JButton();
        deleteSelected = new javax.swing.JButton();
        makeOrder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 500));
        getContentPane().setLayout(null);

		tableBasket.setAutoCreateRowSorter(true);
		tableBasket.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
		{

		}, new String[]
		{ "ID Zamówienia", "Tytuł", "Autor", "Cena", "Zaznacz" })
		{
			Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBasket.setGridColor(new java.awt.Color(0, 0, 0));
        tableBasket.setSelectionForeground(new java.awt.Color(255, 0, 51));
        jScrollPane2.setViewportView(tableBasket);
        if (tableBasket.getColumnModel().getColumnCount() > 0) {
            tableBasket.getColumnModel().getColumn(0).setResizable(false);
            tableBasket.getColumnModel().getColumn(0).setPreferredWidth(5);
            tableBasket.getColumnModel().getColumn(1).setResizable(false);
            tableBasket.getColumnModel().getColumn(2).setResizable(false);
            tableBasket.getColumnModel().getColumn(3).setResizable(false);
            tableBasket.getColumnModel().getColumn(3).setPreferredWidth(5);
            tableBasket.getColumnModel().getColumn(4).setResizable(false);
            tableBasket.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(30, 80, 820, 270);

        lMessage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lMessage.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lMessage);
        lMessage.setBounds(40, 360, 400, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Suma:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(490, 360, 56, 23);

        lSum.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lSum.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lSum);
        lSum.setBounds(550, 360, 80, 23);

        selectAll.setBackground(new java.awt.Color(0, 0, 0));
        selectAll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectAll.setForeground(new java.awt.Color(255, 255, 255));
        selectAll.setText(" Zaznacz wszystko");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        getContentPane().add(selectAll);
        selectAll.setBounds(670, 360, 148, 25);

        mainMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskMenuGłówne.gif"))); // NOI18N
        mainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mainMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mainMenuMouseExited(evt);
            }
        });
        getContentPane().add(mainMenu);
        mainMenu.setBounds(40, 400, 150, 40);

        deleteSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskUsuńZaznaczone.gif"))); // NOI18N
        deleteSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteSelectedMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteSelectedMouseExited(evt);
            }
        });
        getContentPane().add(deleteSelected);
        deleteSelected.setBounds(510, 400, 150, 40);

        makeOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskZrealizujZaznaczone.gif"))); // NOI18N
        makeOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                makeOrderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                makeOrderMouseExited(evt);
            }
        });
        getContentPane().add(makeOrder);
        makeOrder.setBounds(690, 400, 150, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ksiegarnia/img/Koszyk_tlo.gif"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        Boolean marked = true;
        if(!selectAll.isSelected()) marked = false;
        float sum = (float) 0.0;
        DefaultTableModel model = (DefaultTableModel) tableBasket.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(marked, i, 4);
            sum += (float) model.getValueAt(i, 3);
        }
        if(!marked) sum = (float) 0.00;
        lSum.setText(String.valueOf(sum) + "zl");
    }//GEN-LAST:event_selectAllActionPerformed

    private void mainMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMenuMouseEntered
        mainMenu.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskMenuGłówneClick.gif")));
    }//GEN-LAST:event_mainMenuMouseEntered

    private void deleteSelectedMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSelectedMouseEntered
        deleteSelected.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskUsuńZaznaczoneClick.gif")));
    }//GEN-LAST:event_deleteSelectedMouseEntered

    private void makeOrderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makeOrderMouseEntered
        makeOrder.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskZrealizujZaznaczoneClick.gif")));
    }//GEN-LAST:event_makeOrderMouseEntered

    private void mainMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMenuMouseExited
        mainMenu.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskMenuGłówne.gif")));
    }//GEN-LAST:event_mainMenuMouseExited

    
    private void deleteSelectedMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSelectedMouseExited
        deleteSelected.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskUsuńZaznaczone.gif")));
    }//GEN-LAST:event_deleteSelectedMouseExited

    private void makeOrderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makeOrderMouseExited
        makeOrder.setIcon(new ImageIcon(getClass().getResource("/ksiegarnia/img/PrzyciskZrealizujZaznaczoneClick.gif")));
    }//GEN-LAST:event_makeOrderMouseExited
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasketView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BasketView().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteSelected;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lMessage;
    private javax.swing.JLabel lSum;
    private javax.swing.JButton mainMenu;
    private javax.swing.JButton makeOrder;
    private javax.swing.JCheckBox selectAll;
    private javax.swing.JTable tableBasket;
    // End of variables declaration//GEN-END:variables
    
    /**
     * sets listener on button
     * @param listener
     */
    public void setDeleteSelectedActionListener(ActionListener listener)
    {
    	deleteSelected.addActionListener(listener);   
    }
    /**
     * sets listener on button
     * @param listener
     */
    public void setMainMenuActionListener(ActionListener listener)
    {
    	mainMenu.addActionListener(listener);   
    }
    /**
     * sets listener on button
     * @param listener
     */
    public void setMakeOrderActionListener(ActionListener listener)
    {
    	makeOrder.addActionListener(listener);   
    }
    /**
     * 
     * @return ArrayList of ids books to delete
     */
    public ArrayList<Integer> getBooksToDelete()
    {
    	ArrayList<Integer> allSelected = new ArrayList<Integer>();
    	DefaultTableModel model = (DefaultTableModel) tableBasket.getModel();
        Boolean empty = true;
        for (int i = 0; i < tableBasket.getModel().getRowCount(); i++)
        {
            Boolean checked = (Boolean) model.getValueAt(i, 4);
            if(checked != null && checked)
            {
                empty = false;
                break;
            }
        }
        if (tableBasket.getRowCount() == 0) {
            lMessage.setText("Tablica jest pusta!");
        }
        else if(!empty)
        { 
        	for (int i = 0; i < tableBasket.getModel().getRowCount(); i++) {
        		Boolean checked = (Boolean) model.getValueAt(i, 4);
        		if (checked != null && checked) {

        			int id = (int)model.getValueAt(i, 0);
        			allSelected.add(id);
        			model.removeRow(i--);
        		}
        	}
        }
    	
    	return allSelected; 	
    }
    /**
     * 
     * @return ArrayList of BookOrder to confirm
     */
    public ArrayList<BookOrder> getOrderedBooks()
    {
    	ArrayList<BookOrder> allSelected = new ArrayList<BookOrder>();
    	DefaultTableModel model = (DefaultTableModel) tableBasket.getModel();
    	Boolean empty = true;
    	for (int i = 0; i < tableBasket.getModel().getRowCount(); i++)
    	{
    		Boolean checked = (Boolean) model.getValueAt(i, 4);
    		if(checked != null && checked)
    		{
    			empty = false;
    			break;
    		}
    	}
    	if(!empty)
    	{
    		for (int i = 0; i < tableBasket.getModel().getRowCount(); i++) {
    			Boolean checked = (Boolean) model.getValueAt(i, 4);
    			if (checked != null && checked) {
    				allSelected.add(new BookOrder( (int)model.getValueAt(i, 0),(float)model.getValueAt(i, 3)));
    			}
    		}
    	}

    	return allSelected; 	
    }
    /**
     * shows table with books which client added
     * @param ArrayList<BookInformation>
     */
    public void showTable(ArrayList<BookInformation> allBooks ) {
        float sum = (float) 0.00;
        DefaultTableModel model = (DefaultTableModel) tableBasket.getModel();
        for (BookInformation curBook : allBooks) {
            model.addRow(new Object[]{curBook.getID(),curBook.getTitle(), curBook.getAuthor(), curBook.getPrice()});
        }
        lSum.setText(String.valueOf(sum) + "zl");
        tableBasket.getModel().addTableModelListener((TableModelEvent e) -> {
            float sum1 = (float) 0.0;
            for (int i = 0; i < tableBasket.getModel().getRowCount(); i++) {
                Boolean checked = (Boolean) model.getValueAt(i, 4);
                if (checked != null && checked) {
                    sum1 += (float) model.getValueAt(i, 3);
                }
            }
            sum1 *= 100;
            sum1 = Math.round(sum1);
            sum1 /= 100;
            lSum.setText(String.valueOf(sum1) + "zl");
        });
    }
    
}
